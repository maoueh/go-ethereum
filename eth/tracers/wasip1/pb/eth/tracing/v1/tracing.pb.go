// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: eth/tracing/v1/tracing.proto

package pbtracing

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OnBlockchainInitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainConfig *ChainConfig `protobuf:"bytes,1,opt,name=chain_config,json=chainConfig,proto3" json:"chain_config,omitempty"`
}

func (x *OnBlockchainInitMessage) Reset() {
	*x = OnBlockchainInitMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_tracing_v1_tracing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnBlockchainInitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnBlockchainInitMessage) ProtoMessage() {}

func (x *OnBlockchainInitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eth_tracing_v1_tracing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnBlockchainInitMessage.ProtoReflect.Descriptor instead.
func (*OnBlockchainInitMessage) Descriptor() ([]byte, []int) {
	return file_eth_tracing_v1_tracing_proto_rawDescGZIP(), []int{0}
}

func (x *OnBlockchainInitMessage) GetChainConfig() *ChainConfig {
	if x != nil {
		return x.ChainConfig
	}
	return nil
}

type ChainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId                       *BigInt `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	HomesteadBlock                *BigInt `protobuf:"bytes,2,opt,name=homestead_block,json=homesteadBlock,proto3" json:"homestead_block,omitempty"`
	DaoForkBlock                  *BigInt `protobuf:"bytes,3,opt,name=dao_fork_block,json=daoForkBlock,proto3" json:"dao_fork_block,omitempty"`
	DaoForkSupport                bool    `protobuf:"varint,4,opt,name=dao_fork_support,json=daoForkSupport,proto3" json:"dao_fork_support,omitempty"`
	Eip150Block                   *BigInt `protobuf:"bytes,5,opt,name=eip150_block,json=eip150Block,proto3" json:"eip150_block,omitempty"`
	Eip155Block                   *BigInt `protobuf:"bytes,6,opt,name=eip155_block,json=eip155Block,proto3" json:"eip155_block,omitempty"`
	Eip158Block                   *BigInt `protobuf:"bytes,7,opt,name=eip158_block,json=eip158Block,proto3" json:"eip158_block,omitempty"`
	ByzantiumBlock                *BigInt `protobuf:"bytes,8,opt,name=byzantium_block,json=byzantiumBlock,proto3" json:"byzantium_block,omitempty"`
	ConstantinopleBlock           *BigInt `protobuf:"bytes,9,opt,name=constantinople_block,json=constantinopleBlock,proto3" json:"constantinople_block,omitempty"`
	PetersburgBlock               *BigInt `protobuf:"bytes,10,opt,name=petersburg_block,json=petersburgBlock,proto3" json:"petersburg_block,omitempty"`
	IstanbulBlock                 *BigInt `protobuf:"bytes,11,opt,name=istanbul_block,json=istanbulBlock,proto3" json:"istanbul_block,omitempty"`
	MuirGlacierBlock              *BigInt `protobuf:"bytes,12,opt,name=muir_glacier_block,json=muirGlacierBlock,proto3" json:"muir_glacier_block,omitempty"`
	BerlinBlock                   *BigInt `protobuf:"bytes,13,opt,name=berlin_block,json=berlinBlock,proto3" json:"berlin_block,omitempty"`
	LondonBlock                   *BigInt `protobuf:"bytes,14,opt,name=london_block,json=londonBlock,proto3" json:"london_block,omitempty"`
	ArrowGlacierBlock             *BigInt `protobuf:"bytes,15,opt,name=arrow_glacier_block,json=arrowGlacierBlock,proto3" json:"arrow_glacier_block,omitempty"`
	GrayGlacierBlock              *BigInt `protobuf:"bytes,16,opt,name=gray_glacier_block,json=grayGlacierBlock,proto3" json:"gray_glacier_block,omitempty"`
	MergeNetsplitBlock            *BigInt `protobuf:"bytes,17,opt,name=merge_netsplit_block,json=mergeNetsplitBlock,proto3" json:"merge_netsplit_block,omitempty"`
	ShanghaiTime                  *uint64 `protobuf:"varint,18,opt,name=shanghai_time,json=shanghaiTime,proto3,oneof" json:"shanghai_time,omitempty"`
	CancunTime                    *uint64 `protobuf:"varint,19,opt,name=cancun_time,json=cancunTime,proto3,oneof" json:"cancun_time,omitempty"`
	PragueTime                    *uint64 `protobuf:"varint,20,opt,name=prague_time,json=pragueTime,proto3,oneof" json:"prague_time,omitempty"`
	VerkleTime                    *uint64 `protobuf:"varint,21,opt,name=verkle_time,json=verkleTime,proto3,oneof" json:"verkle_time,omitempty"`
	TerminalTotalDifficulty       *BigInt `protobuf:"bytes,22,opt,name=terminal_total_difficulty,json=terminalTotalDifficulty,proto3" json:"terminal_total_difficulty,omitempty"`
	TerminalTotalDifficultyPassed bool    `protobuf:"varint,23,opt,name=terminal_total_difficulty_passed,json=terminalTotalDifficultyPassed,proto3" json:"terminal_total_difficulty_passed,omitempty"`
}

func (x *ChainConfig) Reset() {
	*x = ChainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_tracing_v1_tracing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainConfig) ProtoMessage() {}

func (x *ChainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_eth_tracing_v1_tracing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainConfig.ProtoReflect.Descriptor instead.
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return file_eth_tracing_v1_tracing_proto_rawDescGZIP(), []int{1}
}

func (x *ChainConfig) GetChainId() *BigInt {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *ChainConfig) GetHomesteadBlock() *BigInt {
	if x != nil {
		return x.HomesteadBlock
	}
	return nil
}

func (x *ChainConfig) GetDaoForkBlock() *BigInt {
	if x != nil {
		return x.DaoForkBlock
	}
	return nil
}

func (x *ChainConfig) GetDaoForkSupport() bool {
	if x != nil {
		return x.DaoForkSupport
	}
	return false
}

func (x *ChainConfig) GetEip150Block() *BigInt {
	if x != nil {
		return x.Eip150Block
	}
	return nil
}

func (x *ChainConfig) GetEip155Block() *BigInt {
	if x != nil {
		return x.Eip155Block
	}
	return nil
}

func (x *ChainConfig) GetEip158Block() *BigInt {
	if x != nil {
		return x.Eip158Block
	}
	return nil
}

func (x *ChainConfig) GetByzantiumBlock() *BigInt {
	if x != nil {
		return x.ByzantiumBlock
	}
	return nil
}

func (x *ChainConfig) GetConstantinopleBlock() *BigInt {
	if x != nil {
		return x.ConstantinopleBlock
	}
	return nil
}

func (x *ChainConfig) GetPetersburgBlock() *BigInt {
	if x != nil {
		return x.PetersburgBlock
	}
	return nil
}

func (x *ChainConfig) GetIstanbulBlock() *BigInt {
	if x != nil {
		return x.IstanbulBlock
	}
	return nil
}

func (x *ChainConfig) GetMuirGlacierBlock() *BigInt {
	if x != nil {
		return x.MuirGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetBerlinBlock() *BigInt {
	if x != nil {
		return x.BerlinBlock
	}
	return nil
}

func (x *ChainConfig) GetLondonBlock() *BigInt {
	if x != nil {
		return x.LondonBlock
	}
	return nil
}

func (x *ChainConfig) GetArrowGlacierBlock() *BigInt {
	if x != nil {
		return x.ArrowGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetGrayGlacierBlock() *BigInt {
	if x != nil {
		return x.GrayGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetMergeNetsplitBlock() *BigInt {
	if x != nil {
		return x.MergeNetsplitBlock
	}
	return nil
}

func (x *ChainConfig) GetShanghaiTime() uint64 {
	if x != nil && x.ShanghaiTime != nil {
		return *x.ShanghaiTime
	}
	return 0
}

func (x *ChainConfig) GetCancunTime() uint64 {
	if x != nil && x.CancunTime != nil {
		return *x.CancunTime
	}
	return 0
}

func (x *ChainConfig) GetPragueTime() uint64 {
	if x != nil && x.PragueTime != nil {
		return *x.PragueTime
	}
	return 0
}

func (x *ChainConfig) GetVerkleTime() uint64 {
	if x != nil && x.VerkleTime != nil {
		return *x.VerkleTime
	}
	return 0
}

func (x *ChainConfig) GetTerminalTotalDifficulty() *BigInt {
	if x != nil {
		return x.TerminalTotalDifficulty
	}
	return nil
}

func (x *ChainConfig) GetTerminalTotalDifficultyPassed() bool {
	if x != nil {
		return x.TerminalTotalDifficultyPassed
	}
	return false
}

type OnEnterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depth  int64   `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	OpCode uint64  `protobuf:"varint,2,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
	From   []byte  `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To     []byte  `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Input  []byte  `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Gas    uint64  `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	Value  *BigInt `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OnEnterMessage) Reset() {
	*x = OnEnterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_tracing_v1_tracing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnEnterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnEnterMessage) ProtoMessage() {}

func (x *OnEnterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eth_tracing_v1_tracing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnEnterMessage.ProtoReflect.Descriptor instead.
func (*OnEnterMessage) Descriptor() ([]byte, []int) {
	return file_eth_tracing_v1_tracing_proto_rawDescGZIP(), []int{2}
}

func (x *OnEnterMessage) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OnEnterMessage) GetOpCode() uint64 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *OnEnterMessage) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *OnEnterMessage) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *OnEnterMessage) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *OnEnterMessage) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *OnEnterMessage) GetValue() *BigInt {
	if x != nil {
		return x.Value
	}
	return nil
}

type OnExitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depth    int64   `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	Output   []byte  `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	GasUsed  uint64  `protobuf:"varint,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Reverted bool    `protobuf:"varint,4,opt,name=reverted,proto3" json:"reverted,omitempty"`
	Error    *string `protobuf:"bytes,5,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *OnExitMessage) Reset() {
	*x = OnExitMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_tracing_v1_tracing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnExitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnExitMessage) ProtoMessage() {}

func (x *OnExitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eth_tracing_v1_tracing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnExitMessage.ProtoReflect.Descriptor instead.
func (*OnExitMessage) Descriptor() ([]byte, []int) {
	return file_eth_tracing_v1_tracing_proto_rawDescGZIP(), []int{3}
}

func (x *OnExitMessage) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OnExitMessage) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *OnExitMessage) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *OnExitMessage) GetReverted() bool {
	if x != nil {
		return x.Reverted
	}
	return false
}

func (x *OnExitMessage) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type OnOpcodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pc     uint64  `protobuf:"varint,1,opt,name=pc,proto3" json:"pc,omitempty"`
	OpCode uint64  `protobuf:"varint,2,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
	Gas    uint64  `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	Cost   uint64  `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	RData  []byte  `protobuf:"bytes,5,opt,name=r_data,json=rData,proto3" json:"r_data,omitempty"`
	Depth  int32   `protobuf:"varint,6,opt,name=depth,proto3" json:"depth,omitempty"`
	Error  *string `protobuf:"bytes,7,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *OnOpcodeMessage) Reset() {
	*x = OnOpcodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_tracing_v1_tracing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOpcodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOpcodeMessage) ProtoMessage() {}

func (x *OnOpcodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eth_tracing_v1_tracing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOpcodeMessage.ProtoReflect.Descriptor instead.
func (*OnOpcodeMessage) Descriptor() ([]byte, []int) {
	return file_eth_tracing_v1_tracing_proto_rawDescGZIP(), []int{4}
}

func (x *OnOpcodeMessage) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *OnOpcodeMessage) GetOpCode() uint64 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *OnOpcodeMessage) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *OnOpcodeMessage) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *OnOpcodeMessage) GetRData() []byte {
	if x != nil {
		return x.RData
	}
	return nil
}

func (x *OnOpcodeMessage) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OnOpcodeMessage) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type OnFaultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pc     uint64  `protobuf:"varint,1,opt,name=pc,proto3" json:"pc,omitempty"`
	OpCode uint64  `protobuf:"varint,2,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
	Gas    uint64  `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	Cost   uint64  `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Depth  int32   `protobuf:"varint,5,opt,name=depth,proto3" json:"depth,omitempty"`
	Error  *string `protobuf:"bytes,6,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *OnFaultMessage) Reset() {
	*x = OnFaultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_tracing_v1_tracing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnFaultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnFaultMessage) ProtoMessage() {}

func (x *OnFaultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eth_tracing_v1_tracing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnFaultMessage.ProtoReflect.Descriptor instead.
func (*OnFaultMessage) Descriptor() ([]byte, []int) {
	return file_eth_tracing_v1_tracing_proto_rawDescGZIP(), []int{5}
}

func (x *OnFaultMessage) GetPc() uint64 {
	if x != nil {
		return x.Pc
	}
	return 0
}

func (x *OnFaultMessage) GetOpCode() uint64 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *OnFaultMessage) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *OnFaultMessage) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *OnFaultMessage) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OnFaultMessage) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type OnGasChangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old    uint64 `protobuf:"varint,1,opt,name=old,proto3" json:"old,omitempty"`
	New    uint64 `protobuf:"varint,2,opt,name=new,proto3" json:"new,omitempty"`
	Reason uint64 `protobuf:"varint,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *OnGasChangeMessage) Reset() {
	*x = OnGasChangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_tracing_v1_tracing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnGasChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnGasChangeMessage) ProtoMessage() {}

func (x *OnGasChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eth_tracing_v1_tracing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnGasChangeMessage.ProtoReflect.Descriptor instead.
func (*OnGasChangeMessage) Descriptor() ([]byte, []int) {
	return file_eth_tracing_v1_tracing_proto_rawDescGZIP(), []int{6}
}

func (x *OnGasChangeMessage) GetOld() uint64 {
	if x != nil {
		return x.Old
	}
	return 0
}

func (x *OnGasChangeMessage) GetNew() uint64 {
	if x != nil {
		return x.New
	}
	return 0
}

func (x *OnGasChangeMessage) GetReason() uint64 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type BigInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value is stored as a byte array in big-endian order, will contain at
	// most 32 bytes.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_tracing_v1_tracing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_eth_tracing_v1_tracing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_eth_tracing_v1_tracing_proto_rawDescGZIP(), []int{7}
}

func (x *BigInt) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_eth_tracing_v1_tracing_proto protoreflect.FileDescriptor

var file_eth_tracing_v1_tracing_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x74, 0x68, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x61, 0x63, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x17, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8d, 0x0a, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x0e, 0x64, 0x61, 0x6f, 0x5f, 0x66, 0x6f, 0x72,
	0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x61, 0x6f,
	0x46, 0x6f, 0x72, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x6f,
	0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x61, 0x6f, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65,
	0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d,
	0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x38, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63,
	0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31, 0x35,
	0x38, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0f, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74,
	0x69, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x62,
	0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3f, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63,
	0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x37,
	0x0a, 0x10, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72, 0x67, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75,
	0x72, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x0e, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x62, 0x75, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0d, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x12,
	0x6d, 0x75, 0x69, 0x72, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x75, 0x69, 0x72, 0x47, 0x6c, 0x61, 0x63,
	0x69, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x0c, 0x62, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x0c, 0x6c, 0x6f, 0x6e,
	0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x6c,
	0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x13, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x47, 0x6c, 0x61, 0x63,
	0x69, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x79,
	0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49,
	0x6e, 0x74, 0x52, 0x10, 0x67, 0x72, 0x61, 0x79, 0x47, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6e, 0x65,
	0x74, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x52, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x75, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x61,
	0x67, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x19, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x52, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x75, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x67, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x4f, 0x6e, 0x45, 0x78,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x4f, 0x6e, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x70, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67,
	0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x4f, 0x6e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x70, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x12, 0x4f, 0x6e, 0x47, 0x61, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x06, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x67,
	0x6f, 0x2d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x73, 0x2f, 0x77, 0x61, 0x73, 0x69, 0x70, 0x31, 0x2f, 0x70, 0x62,
	0x2f, 0x65, 0x74, 0x68, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b,
	0x70, 0x62, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_eth_tracing_v1_tracing_proto_rawDescOnce sync.Once
	file_eth_tracing_v1_tracing_proto_rawDescData = file_eth_tracing_v1_tracing_proto_rawDesc
)

func file_eth_tracing_v1_tracing_proto_rawDescGZIP() []byte {
	file_eth_tracing_v1_tracing_proto_rawDescOnce.Do(func() {
		file_eth_tracing_v1_tracing_proto_rawDescData = protoimpl.X.CompressGZIP(file_eth_tracing_v1_tracing_proto_rawDescData)
	})
	return file_eth_tracing_v1_tracing_proto_rawDescData
}

var file_eth_tracing_v1_tracing_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_eth_tracing_v1_tracing_proto_goTypes = []interface{}{
	(*OnBlockchainInitMessage)(nil), // 0: acme.OnBlockchainInitMessage
	(*ChainConfig)(nil),             // 1: acme.ChainConfig
	(*OnEnterMessage)(nil),          // 2: acme.OnEnterMessage
	(*OnExitMessage)(nil),           // 3: acme.OnExitMessage
	(*OnOpcodeMessage)(nil),         // 4: acme.OnOpcodeMessage
	(*OnFaultMessage)(nil),          // 5: acme.OnFaultMessage
	(*OnGasChangeMessage)(nil),      // 6: acme.OnGasChangeMessage
	(*BigInt)(nil),                  // 7: acme.BigInt
}
var file_eth_tracing_v1_tracing_proto_depIdxs = []int32{
	1,  // 0: acme.OnBlockchainInitMessage.chain_config:type_name -> acme.ChainConfig
	7,  // 1: acme.ChainConfig.chain_id:type_name -> acme.BigInt
	7,  // 2: acme.ChainConfig.homestead_block:type_name -> acme.BigInt
	7,  // 3: acme.ChainConfig.dao_fork_block:type_name -> acme.BigInt
	7,  // 4: acme.ChainConfig.eip150_block:type_name -> acme.BigInt
	7,  // 5: acme.ChainConfig.eip155_block:type_name -> acme.BigInt
	7,  // 6: acme.ChainConfig.eip158_block:type_name -> acme.BigInt
	7,  // 7: acme.ChainConfig.byzantium_block:type_name -> acme.BigInt
	7,  // 8: acme.ChainConfig.constantinople_block:type_name -> acme.BigInt
	7,  // 9: acme.ChainConfig.petersburg_block:type_name -> acme.BigInt
	7,  // 10: acme.ChainConfig.istanbul_block:type_name -> acme.BigInt
	7,  // 11: acme.ChainConfig.muir_glacier_block:type_name -> acme.BigInt
	7,  // 12: acme.ChainConfig.berlin_block:type_name -> acme.BigInt
	7,  // 13: acme.ChainConfig.london_block:type_name -> acme.BigInt
	7,  // 14: acme.ChainConfig.arrow_glacier_block:type_name -> acme.BigInt
	7,  // 15: acme.ChainConfig.gray_glacier_block:type_name -> acme.BigInt
	7,  // 16: acme.ChainConfig.merge_netsplit_block:type_name -> acme.BigInt
	7,  // 17: acme.ChainConfig.terminal_total_difficulty:type_name -> acme.BigInt
	7,  // 18: acme.OnEnterMessage.value:type_name -> acme.BigInt
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_eth_tracing_v1_tracing_proto_init() }
func file_eth_tracing_v1_tracing_proto_init() {
	if File_eth_tracing_v1_tracing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eth_tracing_v1_tracing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnBlockchainInitMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_tracing_v1_tracing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_tracing_v1_tracing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnEnterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_tracing_v1_tracing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnExitMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_tracing_v1_tracing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOpcodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_tracing_v1_tracing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnFaultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_tracing_v1_tracing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnGasChangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_tracing_v1_tracing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eth_tracing_v1_tracing_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_eth_tracing_v1_tracing_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_eth_tracing_v1_tracing_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_eth_tracing_v1_tracing_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eth_tracing_v1_tracing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eth_tracing_v1_tracing_proto_goTypes,
		DependencyIndexes: file_eth_tracing_v1_tracing_proto_depIdxs,
		MessageInfos:      file_eth_tracing_v1_tracing_proto_msgTypes,
	}.Build()
	File_eth_tracing_v1_tracing_proto = out.File
	file_eth_tracing_v1_tracing_proto_rawDesc = nil
	file_eth_tracing_v1_tracing_proto_goTypes = nil
	file_eth_tracing_v1_tracing_proto_depIdxs = nil
}
